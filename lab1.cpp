#include <iostream>
using namespace std;

// ЗАДАНИЕ 1 ///////////////////////

// 2. Сумма знаков.
// Дана сигнатура функции: int sumLastNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат сложения двух последних знаков числах, предполагая, что знаков в
// числе не менее двух. Подсказки:
// int x=123%10; // х будет иметь значение 3
// int у=123/10; // у будет иметь значение 12
// Пример:
// x=4568
// результат: 14

int sumLastDigits(int x) {
    int last = x % 10;
    int preLast = (x / 10) % 10;
    return last + preLast;
}

// 4. Есть ли позитив.
// Дана сигнатура функции: bool isPositive (intx);
// Необходимо реализовать функцию таким образом, чтобы она принимала число
// x и возвращала true, если оно положительное.
// Пример 1:
// x=3
// результат: true
// Пример 2:
// x=-5
// результат: false

bool isPositive(int x) {
    return x > 0;
}

// 6. Большая буква.
// Дана сигнатура функции: bool isUpperCase (char x);
// Необходимо реализовать функцию таким образом, чтобы она принимала
// символ x и возвращала true, если это большая буква в диапазоне от ‘A’ до ‘Z’.
// Пример 1:
// x=’D’
// результат: true
// Пример 2:
// x=’q’
// результат: false

bool isUpperCase(char x) {
    return x >= 'A' && x <= 'Z';
}

// 8. Делитель.
// Дана сигнатура функции: bool isDivisor (int a, int b);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если любое из принятых чисел делит другое нацело.
// Пример 1:
// a=3 b=6
// результат: true
// Пример 2:
// a=2 b=15
// результат: false

bool isDivisor(int a, int b) {
    if (a == 0 || b == 0) return false;
    return (a % b == 0) || (b % a == 0);
}

// 10 Многократный вызов.
// Дана сигнатура функции: int lastNumSum(int a, int b)
// Необходимо реализовать функцию таким образом, чтобы она считала сумму
// цифр двух чисел из разряда единиц. Выполните с его помощью
// последовательное сложение пяти чисел и результат выведите на экран.
// Постарайтесь выполнить задачу, используя минимально возможное
// количество вспомогательных переменных.
// Пример:
// 5+11 это 6
// 6+123 это 9
// 9+14 это 13
// 13+1 это 4
// Итого 4

int lastDigitSum(int a, int b) {
    return (a % 10) + (b % 10);
}

// ЗАДАНИЕ 2 ///////////////////////

// 2. Безопасное деление.
// Дана сигнатура функции: double safeDiv (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// деление x на y, и при этом гарантировала, что не будет выкинута ошибка
// деления на 0. При делении на 0 следует вернуть из функции число 0. Подсказка:
// смотри ограничения на операции типов данных.
// Пример 1:
// x=5 y=0
// результат: 0
// Пример 2:
// x=8 y=2
// результат: 4

double safeDiv(int x, int y) {
    if (y == 0) return 0;
    return static_cast<double>(x) / y;
}

// 4. Строка сравнения.
// Дана сигнатура функции: String makeDecision (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, которая включает два принятых функцией числа и корректно
// выставленный знак операции сравнения (больше, меньше, или равно).
// Пример 1:
// x=5 y=7
// результат: “5< 7”
// Пример 2:
// x=8 y=-1
// результат: “8 >-1”
// Пример 3:
// x=4 y=4
// результат: “4==4”

string makeDecision(int x, int y) {
    if (x > y) {
        return to_string(x) + " > " + to_string(y);
    } else if (x < y) {
        return to_string(x) + " < " + to_string(y);
    } else {
        return to_string(x) + "==" + to_string(y);
    }
}

// 6. Тройная сумма.
// Дана сигнатура функции: bool sum3 (int x, int y, int z);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если два любых числа (из трех принятых) можно сложить так, чтобы получить
// третье.
// Пример 1:
// x=5 y=7 z=2
// результат: true
// Пример 2:
// x=8 y=-1 z=4
// результат: false

bool sumTrio(int x, int y, int z) {
    if (x + y == z) return true;
    if (x + z == y) return true;
    if (y + z == x) return true;
    return false;
}

// 8. Возраст.
// Дана сигнатура функции: String age (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой сначала будет число х, а затем одно из слов:
// • год
// • года
// • лет
// Слово “год” добавляется, если число х заканчивается на 1, кроме числа 11.
// Слово “года” добавляется, если число х заканчивается на 2, 3 или 4, кроме чисел
// 12, 13, 14.
// Слово “лет”добавляется во всех остальных случаях.
// Подсказка: оператор % позволяет получить остаток от деления.
// Пример 1:
// x=5
// результат: “5 лет”
// Пример 2:
// x=31
// результат: “31 год”
// Пример 3:
// x=44
// результат: “44 года”

string age(int x) {
    int lastDigit = x % 10;
    int lastTwoDigits = x % 100;

    if (lastDigit == 1 && lastTwoDigits != 11) {
        return to_string(x) + " год";
    } else if ((lastDigit >= 2 && lastDigit <= 4) && !(lastTwoDigits >= 12 && lastTwoDigits <= 14)) {
        return to_string(x) + " года";
    } else {
        return to_string(x) + " лет";
    }
}

// 10. Вывод дней недели.
// Дана сигнатура функции: void printDays (int x);
// В качестве параметра функция принимает число x, обозначаются день недели.
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран название переданного в него дня и всех последующих до конца недели
// дней. Если в качестве параметра передан не день (число, не в диапазоне от 1 от
// 7), то выводится текст “это не день недели”. Первый день понедельник,
// последний – воскресенье. Вместо if в данной задаче используйте switch.
// Пример 1:
// x=4
// результат:
// четверг
// пятница
// суббота
// воскресенье
// Пример 2:
// x=18
// результат:
// это не день недели

void printWeekDays(int x) {
    switch(x) {
        case 1:
            cout << "понедельник\n";
        case 2:
            cout << "вторник\n";
        case 3:
            cout << "среда\n";
        case 4:
            cout << "четверг\n";
        case 5:
            cout << "пятница\n";
        case 6:
            cout << "суббота\n";
        case 7:
            cout << "воскресенье\n";
            break;
        default:
            cout << "это не день недели\n";
    }
}

// ЗАДАНИЕ 3 ///////////////////////

// 2. Числа наоборот.
// Дана сигнатура функции: String reverseListNums (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// строку, в которой будут записаны все числа от x до 0 (включительно).
// Пример:
// x=5
// результат: “5 4 3 2 1 0”

string reverseListNums(int x) {
    string result = "";
    for (int i = x; i >= 0; i--) {
        result += to_string(i);
        if (i > 0) result += " ";
    }
    return result;
}

// 4. Степень числа.
// Дана сигнатура функции: int pow (int x, int y);
// Необходимо реализовать функцию таким образом, чтобы она возвращала
// результат возведения x в степень y.
// Подсказка: для получения степени необходимо умножить единицу на число x,
// и сделать это y раз, т.е. два в третьей степени это 1*2*2*2
// Пример:
// x=2
// y=5
// результат: 32

int powInt(int x, int y) {
    int result = 1;
    for (int i = 0; i < y; i++) {
        result *= x;
    }
    return result;
}

// 6. Одинаковость.
// Дана сигнатура функции: bool equalNum (int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала true,
// если все знаки числа одинаковы, и false в ином случае.
// Подсказки:
// intx=123%10; // х будет иметь значение 3
// intу=123/10; // у будет иметь значение 12
// Пример 1:
// x=1111
// результат: true
// Пример 2:
// x=1211
// результат: false

bool equalNum(int x) {
    int lastDigit = x % 10;
    x /= 10;
    while (x > 0) {
        if (x % 10 != lastDigit) return false;
        x /= 10;
    }
    return true;
}

// 8. Левый треугольник.
// Дана сигнатура функции: void leftTriangle (int x);
// Необходимо реализовать функцию таким образом, чтобы она выводила на
// экран треугольник из символов ‘*’ у которого х символов в высоту, а количество
// символов в ряду совпадает с номером строки.
// Пример 1:
// x=2
// результат:
// *
// **
// Пример 2:
// x=4
// результат:
// *
// **
// ***
// ****

void leftTriangle(int x) {
    for (int i = 1; i <= x; i++) {
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        cout << endl;
    }
}

// 10. Угадайка.
// Дана сигнатура функции: void guessGame()
// Необходимо реализовать функцию таким образом, чтобы она генерировала
// случайное число от 0 до 9, далее считывала с консоли введенное пользователем
// число и выводила, угадал ли пользователь то, что было загадано, или нет.
// Функция запускается до тех пор, пока пользователь не угадает число. После
// этого выведите на экран количество попыток, которое потребовалось
// пользователю, чтобы угадать число.
// Пример:
// Введите число от 0 до 9:
// 5
// Вы не угадали, введите число от 0 до 9:
// 9
// Вы угадали!
// Вы отгадали число за 2 попытки

void guessGame(int seed) {
    int target = (seed * 7 + 3) % 10;
    int guess;
    int attempts = 0;

    do {
        cout << "Введите число от 0 до 9: ";
        cin >> guess;
        attempts++;
        if (guess != target) {
            cout << "Вы не угадали, попробуйте снова." << endl;
        }
    } while (guess != target);

    cout << "Вы угадали!" << endl;
    cout << "Вы отгадали число за " << attempts << " попыток." << endl;
}

// Задание 4 ///////////////////////

// 2. Поиск последнего значения.
// Дана сигнатура функции: int findLast (int arr[], int x);
// Необходимо реализовать функцию таким образом, чтобы она возвращала индекс
// последнего вхождения числа x в массив arr. Если число не входит в массив –
// возвращается -1.
// Пример:
// arr=[1,2,3,4,2,2,5]
// x=2
// результат: 5

int findLast(int arr[], int size, int x) {
    for (int i = size - 1; i >= 0; i--) {
        if (arr[i] == x) return i;
    }
    return -1;
}

// 4. Добавление в массив.
// Дана сигнатура функции: int * add (int arr[], int x, int pos);
// Необходимо реализовать функцию таким образом, чтобы она возвращала новый
// массив, который будет содержать все элементы массива arr, однако в позицию pos
// будет вставлено значение x.
// Пример:
// arr=[1,2,3,4,5]
// x=9
// pos=3
// результат: [1,2,3,9,4,5]

int* add(int arr[], int size, int x, int pos) {
    int* newArr = new int[size + 1];
    for (int i = 0; i < pos; i++) {
        newArr[i] = arr[i];
    }
    newArr[pos] = x;
    for (int i = pos; i < size; i++) {
        newArr[i + 1] = arr[i];
    }
    return newArr;
}

// 6. Реверс.
// Дана сигнатура функции: void reverse (int arr[]);
// Необходимо реализовать функцию таким образом, чтобы он изменял массив arr.
// После проведенных изменений массив должен быть записан задом-наперед.
// Пример:
// arr=[1,2,3,4,5]
// результат: arr=[5,4,3,2,1]

void reverse(int arr[], int size) {
    for (int i = 0; i < size / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[size - 1 - i];
        arr[size - 1 - i] = temp;
    }
}

// 8. Объединение.
// Дана сигнатура функции: int * concat (int arr1[],int arr2[]);
// Необходимо реализовать функцию таким образом, чтобы она возвращала новый
// массив, в котором сначала идут элементы первого массива (arr1), а затем второго
// (arr2).
// Пример:
// arr1=[1,2,3]
// arr2=[7,8,9]
// результат: [1,2,3,7,8,9]

int* concat(int arr1[], int size1, int arr2[], int size2) {
    int* newArr = new int[size1 + size2];
    for (int i = 0; i < size1; i++) newArr[i] = arr1[i];
    for (int i = 0; i < size2; i++) newArr[size1 + i] = arr2[i];
    return newArr;
}

// 10. Удалить негатив.
// Дана сигнатура функции: int * deleteNegative (int arr[]);
// Необходимо реализовать функцию таким образом, чтобы она возвращала новый
// массив, в котором записаны все элементы массива arr кроме отрицательных.
// Пример:
// arr=[1,2,-3,4,-2,2,-5]
// результат: [1,2,4,2]

int* deleteNegative(int arr[], int size, int &newSize) {
    newSize = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] >= 0) newSize++;
    }

    int* newArr = new int[newSize];
    int index = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] >= 0) {
            newArr[index] = arr[i];
            index++;
        }
    }
    return newArr;
}

int main() {
    while (true) {
        cout << "\nМеню:\n";
        cout << "1. Сумма двух последних цифр числа\n";
        cout << "2. Проверка: положительное ли число\n";
        cout << "3. Проверка: заглавная ли буква\n";
        cout << "4. Проверка: делит ли одно число другое\n";
        cout << "5. Последовательная сумма последних цифр (5 чисел)\n";
        cout << "6. Безопасное деление\n";
        cout << "7. Строка сравнения\n";
        cout << "8. Тройная сумма\n";
        cout << "9. Возраст\n";
        cout << "10. Дни недели\n";
        cout << "11. Числа наоборот.\n";
        cout << "12. Степень числа.\n";
        cout << "13. Одинаковость.\n";
        cout << "14. Левый треугольник.\n";
        cout << "15. Угадайка.\n";
        cout << "16. Поиск последнего значения\n";
        cout << "17. Добавление в массив\n";
        cout << "18. Реверс\n";
        cout << "19. Объединение\n";
        cout << "20. Удалить негатив\n";
        cout << "0. Выход\n";

        int choice;
        cout << "Выберите задачу: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int n;
                cout << "Введите число (число > 10): ";
                cin >> n;
                if (n > -10 && n < 10) {
                    cout << "Ошибка: нужно хотя бы двухзначное число." << endl;
                } else {
                    cout << "Сумма двух последних цифр: " << sumLastDigits(n) << endl;
                }
                break;
            }
            case 2: {
                int n;
                cout << "Введите число: ";
                cin >> n;
                cout << (isPositive(n) ? "true" : "false") << endl;
                break;
            }
            case 3: {
                char c;
                cout << "Введите символ: ";
                cin >> c;
                cout << (isUpperCase(c) ? "true" : "false") << endl;
                break;
            }
            case 4: {
                int a, b;
                cout << "Введите число a: ";
                cin >> a;
                cout << "Введите число b: ";
                cin >> b;
                cout << (isDivisor(a, b) ? "true" : "false") << endl;
                break;
            }
            case 5: {
                int n1, n2, n3, n4, n5;
                cout << "Введите 1 число: "; cin >> n1;
                cout << "Введите 2 число: "; cin >> n2;
                int result = lastDigitSum(n1, n2);
                cout << n1 << " + " << n2 << " → " << result << endl;

                cout << "Введите 3 число: "; cin >> n3;
                result = lastDigitSum(result, n3);
                cout << result << " + " << n3 << " → " << result << endl;

                cout << "Введите 4 число: "; cin >> n4;
                result = lastDigitSum(result, n4);
                cout << result << " + " << n4 << " → " << result << endl;

                cout << "Введите 5 число: "; cin >> n5;
                result = lastDigitSum(result, n5);
                cout << result << " + " << n5 << " → " << result << endl;

                cout << "Итого: " << result << endl;
                break;
            }
            case 6: {
                int x, y;
                cout << "Введите делимое x: "; cin >> x;
                cout << "Введите делитель y: "; cin >> y;
                double res = safeDiv(x, y);
                cout << "Результат деления: " << res << endl;
                break;
            }
            case 7: { 
                int a, b;
                cout << "Введите число a: "; cin >> a;
                cout << "Введите число b: "; cin >> b;
                string res = makeDecision(a, b);
                cout << "Результат: " << res << endl;
                break;
            }
            case 8: {
                int a, b, c;
                cout << "Введите число a: "; cin >> a;
                cout << "Введите число b: "; cin >> b;
                cout << "Введите число c: "; cin >> c;
                cout << (sumTrio(a, b, c) ? "true" : "false") << endl;
                break;
            }
            case 9: {
                int n;
                cout << "Введите возраст: "; cin >> n;
                cout << age(n) << endl;
                break;
            }
            case 10: {
                int day;
                cout << "Введите номер дня недели (1-7): "; cin >> day;
                printWeekDays(day);
                break;
            }
            case 11: {
                int n;
                cout << "Введите число: "; cin >> n;
                cout << reverseListNums(n) << endl;
                break;
            }
            case 12: {
                int base, exp;
                cout << "Введите число x: "; cin >> base;
                cout << "Введите степень y: "; cin >> exp;
                cout << base << " в степени " << exp << " = " << powInt(base, exp) << endl;
                break;
            }
            case 13: {
                int n;
                cout << "Введите число: "; cin >> n;
                cout << (equalNum(n) ? "true" : "false") << endl;
                break;
            }
            case 14: {
                int n;
                cout << "Введите высоту треугольника: "; cin >> n;
                leftTriangle(n);
                break;
            }
            case 15: {
                int seed;
                cout << "Введите любое число для генерации случайного числа: ";
                cin >> seed;
                guessGame(seed);
                break;
            }
            case 16: {
                int n;
                cout << "Введите размер массива: "; cin >> n;
                int arr[100]; // допустим, максимум 100 элементов
                for (int i = 0; i < n; i++) {
                    cout << "arr[" << i << "] = "; cin >> arr[i];
                }
                int x;
                cout << "Введите число для поиска: "; cin >> x;
                int index = findLast(arr, n, x);
                if (index == -1) cout << "Число не найдено в массиве" << endl;
                else cout << "Последнее вхождение числа " << x << " в массиве: " << index << endl;
                break;
            }

            case 17: {
                int n;
                cout << "Введите размер массива: "; cin >> n;
                int arr[100];
                for (int i = 0; i < n; i++) {
                    cout << "arr[" << i << "] = "; cin >> arr[i];
                }
                int x, pos;
                cout << "Введите число для вставки: "; cin >> x;
                cout << "Введите позицию для вставки (0-" << n << "): "; cin >> pos;
                if (pos < 0 || pos > n) {
                    cout << "Неверная позиция!" << endl;
                    break;
                }
                int* newArr = add(arr, n, x, pos);
                cout << "Новый массив: ";
                for (int i = 0; i < n + 1; i++) cout << newArr[i] << " ";
                cout << endl;
                delete[] newArr; // освобождаем память
                break;
            }
            case 18: {
                int n;
                cout << "Введите размер массива: "; cin >> n;
                int arr[100];
                for (int i = 0; i < n; i++) {
                    cout << "arr[" << i << "] = "; cin >> arr[i];
                }
                reverse(arr, n);
                cout << "Массив задом-наперед: ";
                for (int i = 0; i < n; i++) cout << arr[i] << " ";
                cout << endl;
                break;
            }

            case 19: {
                int n1, n2;
                cout << "Введите размер первого массива: "; cin >> n1;
                int arr1[100];
                for (int i = 0; i < n1; i++) {
                    cout << "arr1[" << i << "] = "; cin >> arr1[i];
                }
                cout << "Введите размер второго массива: "; cin >> n2;
                int arr2[100];
                for (int i = 0; i < n2; i++) {
                    cout << "arr2[" << i << "] = "; cin >> arr2[i];
                }
                int* newArr = concat(arr1, n1, arr2, n2);
                cout << "Объединённый массив: ";
                for (int i = 0; i < n1 + n2; i++) cout << newArr[i] << " ";
                cout << endl;
                delete[] newArr;
                break;
            }

            case 20: {
                int n;
                cout << "Введите размер массива: "; cin >> n;
                int arr[100];
                for (int i = 0; i < n; i++) {
                    cout << "arr[" << i << "] = "; cin >> arr[i];
                }
                int newSize;
                int* newArr = deleteNegative(arr, n, newSize);
                cout << "Массив без отрицательных: ";
                for (int i = 0; i < newSize; i++) cout << newArr[i] << " ";
                cout << endl;
                delete[] newArr; // освобождаем память
                break;
            }

            case 0:
                cout << "Выход из программы.\n";
                return 0;
            default:
                cout << "Нет такой задачи.\n";
                break;
        }
    }
}
